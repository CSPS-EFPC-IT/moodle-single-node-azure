#!/bin/bash
#
# Install Moodle 3.11.7 without any additional plugins on Ubuntu 18.04.
# This script must be run as root (ex.: sudo sh [script_name])
# Style Guide: https://google.github.io/styleguide/shellguide.html

# Parameters: all manadatory and must be prefix with "--" on command line.
declare -A parameters=( \
  [data_disk_size]= \
  [db_server_admin_password]= \
  [db_server_admin_username]= \
  [db_server_fqdn]= \
  [db_server_name]= \
  [moodle_admin_email]= \
  [moodle_admin_password]= \
  [moodle_admin_username]= \
  [moodle_data_mount_point_path]= \
  [moodle_db_name]= \
  [moodle_db_password]= \
  [moodle_db_username]= \
  [moodle_upgrade_key]= \
  [smtp_server_fqdn]= \
  [smtp_server_private_ip]= \
  [web_server_fqdn]= )

# Constants
readonly APACHE2_CONF_ENABLED_SECURITY_FILE_PATH="/etc/apache2/conf-enabled/security.conf"
readonly APACHE2_SITE_ENABLED_DEFAULT_FILE_PATH="/etc/apache2/sites-enabled/000-default.conf"
readonly APACHE2_USER="www-data"
readonly MOODLE_DOCUMENT_ROOT_DIR_PATH="/var/www/html/moodle"
readonly MOODLE_LOCAL_CACHE_DIR_PATH="/var/www/html/moodlelocalcache"
readonly MOODLE_TABLE_PREFIX="mdl_" # IMPORTANT: Changing this value will break the ability to upgrade an existing environment.
readonly PHP_INI_FILE_PATH="/etc/php/7.2/apache2/php.ini"

# Functions
source ./utils.sh

#######################################
# Get and extract Moodle core files. Previously extracted files are deleted.
# Arguments:
#   1) URL of the Moodle TAR/GZIP file to download.
#   2) Sha256 hash code of the Moodle TAR/GZIP file to download.
#   3) Moodle installation directory path.
# Outputs:
#   Writes normal log messages to STDOUT.
#   Writes error messages to STDERR.
#######################################
function get_moodle_core() {
  local core_tgz_file_url="$1"
  local core_sha256="$2"
  local core_dir_path="$3"

  local core_tgz_file

  utils::echo_action "Downloading Moodle core tar file..."
  core_tgz_file="$(basename ${core_tgz_file_url})"
  wget "${core_tgz_file_url}" -O "${core_tgz_file}"
  utils::echo_info "Done."

  utils::echo_action "Verifying downloaded file integrity..."
  if ! echo "SHA256(${core_tgz_file})= ${core_sha256}" | sha256sum --check; then
    utils::echo_error "Downloaded file corrupted. Aborting."
    exit 1
  fi
  utils::echo_info "Done."

  if [[ -d "${core_dir_path}" ]]; then
    utils::echo_action "Deleting existing Moodle installation: ${core_dir_path}..."
    rm -rf "${core_dir_path}"
    utils::echo_info "Done."
  fi

  utils::echo_action "Extracting moodle tgz file..."
  tar zxf "${core_tgz_file}" -C "$(dirname ${core_dir_path})"
  utils::echo_info "Done."
}

function main() {

  local crontab_entry
  local moodle_install_options
  local table_count

  utils::set_exit_trap
  utils::echo_title "Start of $0"

  #############################################################################

  utils::echo_title "Parse Input Parameters"
  utils::parse_parameters "$@"

  #############################################################################

  utils::echo_title "Install Tools"
  utils::echo_action "Installing postgres client, php client and unzip packages..."
  apt-get install --yes --quiet \
    php-cli \
    postgresql-client-12 \
    unzip
  utils::echo_info "Done."

  #############################################################################

  utils::echo_title "Install Moodle Dependencies"

  utils::echo_action "Installing apache2 and redis packages..."
  apt-get install --yes --quiet \
    apache2 \
    libapache2-mod-php \
    redis
  utils::echo_info "Done."

  utils::echo_action "Installing php packages..."
  apt-get install --yes --quiet \
    aspell \
    clamav \
    ghostscript \
    graphviz \
    php7.4-curl \
    php7.4-gd \
    php7.4-intl \
    php7.4-ldap \
    php7.4-mbstring \
    php7.4-pgsql \
    php7.4-pspell \
    php7.4-redis \
    php7.4-soap \
    php7.4-xml \
    php7.4-xmlrpc \
    php7.4-zip
  utils::echo_info "Done."

  #############################################################################

  utils::echo_title "Setup SMTP Server"

  utils::add_hosts_file_entry \
    "${parameters[smtp_server_private_ip]}" \
    "${parameters[smtp_server_fqdn]}" \
    "Redirect SMTP Server FQDN to Private IP Address."

  #############################################################################

  utils::echo_title "Update PHP Configuration"

  utils::update_php_config_file "upload_max_filesize" "2048M" "${PHP_INI_FILE_PATH}"
  utils::update_php_config_file "post_max_size" "2048M" "${PHP_INI_FILE_PATH}"

  #############################################################################

  utils::echo_title "Update Apache2 Configuration"

  utils::update_apache2_config_file "DocumentRoot" "${MOODLE_DOCUMENT_ROOT_DIR_PATH}" "${APACHE2_SITE_ENABLED_DEFAULT_FILE_PATH}"
  utils::harden_apache2 "${APACHE2_CONF_ENABLED_SECURITY_FILE_PATH}"

  utils::echo_action "Restarting Apache2..."
  service apache2 restart
  utils::echo_info "Done."

  #############################################################################

  utils::echo_title "Create Moodle Database User"

  utils::echo_action "Creating and granting privileges to database user ${parameters[moodle_db_username]}..."
  export PGPASSWORD="${parameters[db_server_admin_password]}"
  psql "host=${parameters[db_server_fqdn]} port=5432 dbname=postgres user=${parameters[db_server_admin_username]}@${parameters[db_server_name]} sslmode=require" << EOF
DO \$\$
BEGIN
  IF EXISTS ( SELECT FROM pg_catalog.pg_roles WHERE rolname='${parameters[moodle_db_username]}' ) THEN
    RAISE WARNING 'Skipped: user ${parameters[moodle_db_username]} already exists.';
  ELSE
    CREATE USER ${parameters[moodle_db_username]} WITH ENCRYPTED PASSWORD '${parameters[moodle_db_password]}';
    GRANT ALL PRIVILEGES ON DATABASE ${parameters[moodle_db_name]} TO ${parameters[moodle_db_username]};
    RAISE INFO 'User ${parameters[moodle_db_username]} created.';
  END IF;
END
\$\$;
EOF
  unset PGPASSWORD
  utils::echo_info "Done."

  #############################################################################

  utils::echo_title "Mount Moodle Data Disk"

  utils::mount_data_disk_by_size \
    "${parameters[data_disk_size]}" \
    "${parameters[moodle_data_mount_point_path]}"

  utils::echo_action "Setting permissions ..."
  chown -R "${APACHE2_USER}:root" "${parameters[moodle_data_mount_point_path]}"
  chmod -R 775 "${parameters[moodle_data_mount_point_path]}"
  utils::echo_info "Done."

  #############################################################################

  utils::echo_title "Create Moodle Local Cache directory"

  if [[ -d "${MOODLE_LOCAL_CACHE_DIR_PATH}" ]]; then
    utils::echo_action "Deleting old ${MOODLE_LOCAL_CACHE_DIR_PATH} folder..."
    rm -rf "${MOODLE_LOCAL_CACHE_DIR_PATH}"
    utils::echo_info "Done."
  fi

  utils::echo_action "Creating new ${MOODLE_LOCAL_CACHE_DIR_PATH} folder with proper ownership..."
  install -o "${APACHE2_USER}" -d "${MOODLE_LOCAL_CACHE_DIR_PATH}"
  utils::echo_info "Done."

  #############################################################################

  utils::echo_title "Get Moodle Core"

  # Ref.: https://download.moodle.org/releases/supported/
  get_moodle_core \
    "https://download.moodle.org/download.php/direct/stable310/moodle-3.11.7.tgz" \
    "c38a7d76c7b806fc1cbacee7fd835b1f8f9932d01332fc45cc4c5b7a8107c940" \
    "${MOODLE_DOCUMENT_ROOT_DIR_PATH}"

  utils::echo_action "Updating file ownership on ${MOODLE_DOCUMENT_ROOT_DIR_PATH}..."
  chown -R "${APACHE2_USER}:root" "${MOODLE_DOCUMENT_ROOT_DIR_PATH}"
  utils::echo_info "Done."

  #############################################################################

  utils::echo_title "Run Moodle Installer"

  moodle_install_options=""

  utils::echo_action "Assessing whether Moodle installer should skip database setup..."
  # If moodle database tables already exist then
  # add the "--skip-database" option to the install script.
  export PGPASSWORD="${parameters[db_server_admin_password]}"
  table_count=$(
    psql \
      "host=${parameters[db_server_fqdn]} port=5432 user=${parameters[db_server_admin_username]}@${parameters[db_server_name]} dbname=${parameters[moodle_db_name]} sslmode=require" \
      --tuples-only \
      --command="select count(*) from information_schema.tables where table_catalog='${parameters[moodle_db_name]}' and table_name like '${MOODLE_TABLE_PREFIX}%'" \
    )
  if (( "${table_count}" == 0 )); then # Use arithmetic expansion operator ((...)) to convert string into integer.
    utils::echo_info "Moodle tables NOT found in database. Database must be setup as part of the install."
  else
    utils::echo_info "Moodle tables found in database. Database setup must be skipped."
    moodle_install_options="${moodle_install_options} --skip-database"
  fi
  utils::echo_info "Done."

  utils::echo_action "Running Moodle installation script..."
  sudo -u "${APACHE2_USER}" /usr/bin/php "${MOODLE_DOCUMENT_ROOT_DIR_PATH}/admin/cli/install.php" \
    --adminemail="${parameters[moodle_admin_email]}" \
    --adminpass="${parameters[moodle_admin_password]}" \
    --adminuser="${parameters[moodle_admin_username]}" \
    --agree-license \
    --chmod=2777 \
    --dataroot="${parameters[moodle_data_mount_point_path]}/" \
    --dbhost="${parameters[db_server_fqdn]}" \
    --dbname="${parameters[moodle_db_name]}" \
    --dbpass="${parameters[moodle_db_password]}" \
    --dbport=5432 \
    --dbtype=pgsql \
    --dbuser="${parameters[moodle_db_username]}@${parameters[db_server_name]}" \
    --fullname="Moodle" \
    --lang=en \
    --non-interactive \
    --prefix="${MOODLE_TABLE_PREFIX}" \
    --shortname="Moodle" \
    --summary="Welcome - Bienvenue" \
    --upgradekey="${parameters[moodle_upgrade_key]}" \
    --wwwroot="https://${parameters[web_server_fqdn]}/" \
    ${moodle_install_options}

  utils::echo_info "Done."

  #############################################################################

  utils::echo_title "Moodle Post Installation Process"

  # No need to test for existing values since the file is always new.
  utils::echo_action "Adding SSL Proxy setting to ${MOODLE_DOCUMENT_ROOT_DIR_PATH}/config.php file..."
  sed -i '/^\$CFG->wwwroot.*/a \$CFG->sslproxy\t= true;' "${MOODLE_DOCUMENT_ROOT_DIR_PATH}/config.php"
  utils::echo_info "Done."

  utils::echo_action "Adding Local Cache Directory setting to ${MOODLE_DOCUMENT_ROOT_DIR_PATH}/config.php file..."
  sed -i "/^\$CFG->dataroot.*/a \$CFG->localcachedir\t= '${MOODLE_LOCAL_CACHE_DIR_PATH}';" "${MOODLE_DOCUMENT_ROOT_DIR_PATH}/config.php"
  utils::echo_info "Done."

  utils::echo_action "Adding default timezone setting to ${MOODLE_DOCUMENT_ROOT_DIR_PATH}/config.php file..."
  sed -i "/^\$CFG->upgradekey.*/a date_default_timezone_set('America/Toronto');" "${MOODLE_DOCUMENT_ROOT_DIR_PATH}/config.php"
  utils::echo_info "Done."

  # Security Check - Executable paths.
  utils::echo_action "Adding directive to prevent executable paths to ${MOODLE_DOCUMENT_ROOT_DIR_PATH}/config.php file..."
  sed -i "/^\$CFG->upgradekey.*/a \$CFG->preventexecpath = true;" "${MOODLE_DOCUMENT_ROOT_DIR_PATH}/config.php"
  utils::echo_info "Done."

  # Security Check - Writable config.php.
  utils::echo_action "Prevent Moodle processes from updating ${MOODLE_DOCUMENT_ROOT_DIR_PATH}/config.php file..."
  chmod u-w "${MOODLE_DOCUMENT_ROOT_DIR_PATH}/config.php"
  utils::echo_info "Done."

  utils::echo_action "Upgrade moodle database to match new Moodle core and/or plugin version..."
  sudo -u "${APACHE2_USER}" /usr/bin/php "${MOODLE_DOCUMENT_ROOT_DIR_PATH}/admin/cli/upgrade.php" --non-interactive
  utils::echo_info "Done."

  utils::echo_action "Purging all Moodle Caches..."
  sudo -u "${APACHE2_USER}" /usr/bin/php "${MOODLE_DOCUMENT_ROOT_DIR_PATH}/admin/cli/purge_caches.php"
  utils::echo_info "Done."

  utils::echo_action "Setting up Moodle Crontab..."
  crontab_entry="* * * * * sudo -u ${APACHE2_USER} php ${MOODLE_DOCUMENT_ROOT_DIR_PATH}/admin/cli/cron.php > /dev/null"
  if [[ -z "$(crontab -l | grep --fixed-strings "${crontab_entry}")" ]]; then
    crontab -l | { cat; echo "${crontab_entry}"; } | crontab -
    utils::echo_info "Done."
  else
    utils::echo_info "Skipped: crontab already set up."
  fi

  #############################################################################

  utils::echo_title "End of $0"
  utils::unset_exit_trap
}

main "$@"
